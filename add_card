#!/usr/bin/env python3

"""
Take user input to add a Trello card with labels and a comment to the specified column of board. 
"""
import argparse
import json
import sys

import requests

# parse CLI args
# asking the user for double-quoted strings to deal with comments/boards/
# columns with spaces. not the greatest :disappointed:
parser = argparse.ArgumentParser(description="add a card to a trello board")
parser.add_argument(
    "--comment",
    "-c",
    type=str,
    help="message the card should have, please use double-quotes, or only the first word will get used!",
    required=True,
    action="extend",
    nargs="+",
)
parser.add_argument(
    "--board",
    "-b",
    type=str,
    help="board the card should be added to, please use double-quotes, or only the first word will get used!",
    required=True,
    action="extend",
    nargs="+",
)
parser.add_argument(
    "--column",
    "-n",
    type=str,
    help="column the card should be added to, please use double-quotes, or only the first word will get used!",
    required=True,
    action="extend",
    nargs="+",
)
parser.add_argument(
    "--label",
    "-l",
    type=str,
    help="label to assigned to the card, please use double-quotes, or only the first word will get used!",
    action="append",
    nargs="+",
)
parser.add_argument(
    "--config",
    "-f",
    type=str,
    help="config file, defaults to ./config.json",
    default="config.json",
)
args = parser.parse_args()

# set args
comment = args.comment[0]
target_board = args.board[0]
target_column = args.column[0]
if args.label:
    target_labels = args.label
if args.config:
    config_file = args.config

# read config file for key and token
# break if they're not present!
with open(config_file, "r") as f:
    config = json.load(f)

BASE_QUERY = { 
    "key": config["key"],
    "token": config["token"]
} 

# get all boards and parse boards for board-name
# output  is a list
def get_boards(target_board):
    url = "https://api.trello.com/1/members/me/boards"
    boards = json.loads(
        requests.request(
            "GET",
            url,
            params=BASE_QUERY
        ).text
    )

    for board in boards:
        if board["name"] == target_board:
            board_id = board["id"]
            return board_id
        else:
            print("board not found")
            sys.exit(1)

# get lists from board
def get_lists(board_id, target_column):
    url = f"https://api.trello.com/1/boards/{board_id}/lists"
    board_lists = json.loads(
        requests.request(
            "GET",
            url,
            params=BASE_QUERY
        ).text
    )

    # don't like creating an empty list for `col_id`, but I'm testing for
    # truthiness, so I need something?
    col_id = []
    for col in board_lists:
        if col["name"] == target_column:
            col_id = col["id"]
            return col_id

    if not col_id:
        print("column not found")
        sys.exit(1)

# create labels, idempotent ops FTW
def create_labels(board_id, label_name):
    url = f"https://api.trello.com/1/labels"
    query = BASE_QUERY
    query["idBoard"] = board_id
    query["name"] = label_name

    label_response = json.loads(
        requests.request(
            "POST",
            url,
            params=query
        ).text
    )
    label_id = label_response["id"]
    return label_id

# create a card on a list
def create_card(list_id, comment, labels=[]):
    url = "https://api.trello.com/1/cards"
    query = BASE_QUERY
    query["idList"] = list_id
    query["name"] = comment
    
    if labels:
        query["idLabels"] = labels

    card_response = json.loads(
        requests.request(
            "POST",
            url,
            params=query
        ).text
    )
    return card_response

# get details to make the card
board_id = get_boards(target_board)
target_list_id = get_lists(board_id, target_column)
label_ids = [create_labels(board_id, label) for label in target_labels]

# pass labels if they exist
if label_ids:
    new_card = create_card(target_list_id, comment, label_ids)
else: 
    new_card = create_card(target_list_id, comment)

if new_card["id"]:
    print(f"success! view your card at {new_card['url']}")
else:
    from pprint import pprint
    print(f"oh no! an error occured, here's the full response: {pprint(new_card)}")

