#!/usr/bin/env python3

"""
Take user input to add a Trello card with labels and a comment to the specified column of board. 
"""
import argparse
import json
import sys

import requests

# parse CLI args
# asking the user for double-quoted strings to deal with comments/boards/
# columns with spaces. not the greatest :disappointed:
parser = argparse.ArgumentParser(description="add a card to a trello board")
parser.add_argument(
    "--comment",
    "-c",
    type=str,
    help="message the card should have, please use double-quotes, or only the first word will get used!",
    required=True,
    action="extend",
    nargs="+",
)
parser.add_argument(
    "--board",
    "-b",
    type=str,
    help="board the card should be added to, please use double-quotes, or only the first word will get used!",
    required=True,
    action="extend",
    nargs="+",
)
parser.add_argument(
    "--column",
    "-n",
    type=str,
    help="column the card should be added to, please use double-quotes, or only the first word will get used!",
    required=True,
    action="extend",
    nargs="+",
)
parser.add_argument(
    "--label",
    "-l",
    type=str,
    help="label to assigned to the card, please use double-quotes, or only the first word will get used!",
    action="append",
    nargs="+",
)
parser.add_argument(
    "--config",
    "-f",
    type=str,
    help="config file, defaults to ./config.json",
    default="config.json",
)
args = parser.parse_args()
print(args)

# set args
comment = args.comment
target_board = args.board[0]
target_column = args.column[0]
if args.label:
    target_label = args.label
if args.config:
    config_file = args.config


# read config file for key and token
# break if they're not present!
with open(config_file, "r") as f:
    config = json.load(f)

KEY = config["key"]
TOKEN = config["token"]

HEADERS = {"Accept": "application/json"}

# get all boards and parse boards for board-name
# output of curl is a list
boards = json.loads(
    requests.request(
        "GET", f"https://api.trello.com/1/members/me/boards?key={KEY}&token={TOKEN}"
    ).text
)

for board in boards:
    if board["name"] == target_board:
        board_id = board["id"]
    else:
        print("board not found")
        sys.exit(1)

# get lists of board_id
board_lists = json.loads(
    requests.request(
        "GET",
        f"https://api.trello.com/1/boards/{board_id}/lists?key={KEY}&token={TOKEN}",
    ).text
)

# don't like using `list` as a variable name, find something better
# also, don't like creating an empty list for `list_id`, but I'm testing for
# truthiness, so I need something?
list_id = []
for list in board_lists:
    if list["name"] == target_column:
        list_id = list["id"]

if not list_id:
    print("column not found")
    sys.exit(1)

# create labels, idempotent ops FTW
if target_label:
    label_ids = []
    # this could be a list comprenesion, but I think it'd be harder to read
    for label in target_label:
        label_response = json.loads(
            requests.request(
                "POST",
                f"https://api.trello.com/1/labels?key={KEY}&token={TOKEN}&idList={list_id}&name={label[0]}&idBoard={board_id}",
            ).text
        )
        label_ids.append(label_response["id"])

# create a card on a list
# curl -XPOST "https://api.trello.com/1/cards?\
#        key={$KEY}&\
#        token={$TOKEN}&\
#        idList={$LIST_ID}&\
#        name={test-card-from-curl}&\
#        idLabels={$LABEL_ID}"
# returns dict with "id" and other stuff
